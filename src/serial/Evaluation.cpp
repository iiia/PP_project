#include <iostream>

using namespace std;

#include "ChessBoard.hpp"

/*
PieceTable::PieceTable(){


	score[ept_empty]={0}
	score[ept_wpawn]	=	{
		0,   0,   0,   0,   0,   0,   0,   0,
		50,  50,  50,  50,  50,  50,  50,  50,
		10,  10,  20,  30,  30,  20,  10,  10,
		5,   5,  10,  25,  25,  10,   5,   5,
		0,   0,   0,  20,  20,   0,   0,   0,
		5,  -5, -10,   0,   0, -10,  -5,   5,
		5,  10,  10, -20, -20,  10,  10,   5,
		0,   0,   0,   0,   0,   0,   0,   0  
	}
	score[ept_bpawn]	=	{
		0,   0,   0,   0,   0,   0,   0,   0,
		50,  50,  50,  50,  50,  50,  50,  50,
		10,  10,  20,  30,  30,  20,  10,  10,
		5,   5,  10,  25,  25,  10,   5,   5,
		0,   0,   0,  20,  20,   0,   0,   0,
		5,  -5, -10,   0,   0, -10,  -5,   5,
		5,  10,  10, -20, -20,  10,  10,   5,
		0,   0,   0,   0,   0,   0,   0,   0  
	}
	//PieceTable[epc_bpaen]={0}
	score[ept_knight]	=	{
		-50, -40, -30, -30, -30, -30, -40, -50,
		-40, -20,   0,   0,   0,   0, -20, -40,
		-30,   0,  10,  15,  15,  10,   0, -30,
		-30,   5,  15,  20,  20,  15,   0, -30,
		-30,   0,  15,  20,  20,  15,   0, -30,
		-30,   5,  10,  15,  15,  10,   5, -30,
		-40, -20,   0,   5,   5,   0, -20, -40,
		-50, -40, -30, -30, -30, -30, -40, -50
	}
	score[ept_bishop]	=	{
		-20, -10, -10, -10, -10, -10, -10, -20,
		-10,   0,   0,   0,   0,   0,   0, -10,
		-10,   0,   5,  10,  10,   5,   0, -10,
		-10,   5,   5,  10,  10,   5,   5, -10,
		-10,   0,  10,  10,  10,  10,   0, -10,
		-10,  10,  10,  10,  10,  10,  10, -10,
		-10,   5,   0,   0,   0,   0,   5, -10,
		-20, -10, -10, -10, -10, -10, -10, -20
	}
	score[ept_rook]	=	{
		0,   0,   0,   0,   0,   0,   0,   0,
		5,  10,  10,  10,  10,  10,  10,   5,
		-5,   0,   0,   0,   0,   0,   0,  -5,
		-5,   0,   0,   0,   0,   0,   0,  -5,
		-5,   0,   0,   0,   0,   0,   0,  -5,
		-5,   0,   0,   0,   0,   0,   0,  -5,
		-5,   0,   0,   0,   0,   0,   0,  -5,
		0,   0,   0,   5,   5,   0,   0,   0
	}
	score[ept_queen]	=	{
		-20, -10, -10,  -5,  -5, -10, -10, -20,
		-10,   0,   0,   0,   0,   0,   0, -10,
		-10,   0,   5,   5,   5,   5,   0, -10,
		-5,   0,   5,   5,   5,   5,   0,  -5,
		0,   0,   5,   5,   5,   5,   0,  -0,
		-10,   5,   5,   5,   5,   5,   0, -10,
		-10,   0,   5,   0,   0,   0,   0, -10,
		-20, -10, -10,  -5,  -5, -10, -10, -20	
	}
	//king middle game
	score[ept_king]	=	{
		-30, -40, -40, -50, -50, -40, -40, -30,
		-30, -40, -40, -50, -50, -40, -40, -30,
		-30, -40, -40, -50, -50, -40, -40, -30,
		-30, -40, -40, -50, -50, -40, -40, -30,
		-20, -30, -30, -40, -40, -30, -30, -20,
		-10, -20, -20, -20, -20, -20, -20, -10,
		20,  20,   0,   0,   0,   0,  20,  20,
		20,  30,  10,   0,   0,  10,  30,  20
	}
}
*/
int ChessBoard::eval(int color){
	int eval=0;
/*	PieceTable myscore;
	for(int i = 0 ; i < 64 ; i++){
		eval += myscore.score[boardMap[i]][i];
	}
	if ( color == 0 ){
		eval = -eval;
	}
	*/
	if ( color == 0 ) {
	eval -= (10 * pieceNum[epc_wpawn]);
	eval -= (50 * pieceNum[epc_wknight]);
	eval -= (30 * pieceNum[epc_wrook]);
	eval -= (32 * pieceNum[epc_wbishop]);
	eval -= (90 * pieceNum[epc_wqueen]);
	eval -= (100 * pieceNum[epc_wking]);
	}
	else {
	eval += (10 * pieceNum[epc_bpawn]);
	eval += (50 * pieceNum[epc_bknight]);
	eval += (30 * pieceNum[epc_brook]);
	eval += (32 * pieceNum[epc_bbishop]);
	eval += (90 * pieceNum[epc_bqueen]);
	eval += (100 * pieceNum[epc_bking]);
	}
	return eval;
}
